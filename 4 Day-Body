{
    public float moveSpeed = 0f;
    public float jumpPower = 0f;
    public float jumpCount = 0;

    public Rigidbody2D rigid;
    public SpriteRenderer rend;

    float horizontal;

    bool isjumping;

    Vector2 dirVec;
    GameObject scanObject;

    private void Start()
    {
        rend = GetComponent<SpriteRenderer>();
        rigid = GetComponent<Rigidbody2D>();
    }

    private void FixedUpdate()
    {
        if (rigid.velocity.y < 0)
        {
            Debug.DrawRay(rigid.position, Vector2.down, new Color(1, 0, 0));
            RaycastHit2D downRay = Physics2D.Raycast(rigid.position, Vector2.down, 1, LayerMask.GetMask("Ground"));

            if (downRay.collider != null && downRay.distance < 0.5f)
            {
                Debug.Log("Ground");
                jumpCount = 0;
            }
        }
        if (rigid.velocity.y < 0)
        {
            Debug.DrawRay(rigid.position, Vector2.down, new Color(1, 0, 0));
            RaycastHit2D downRay = Physics2D.Raycast(rigid.position, Vector2.down, 1, LayerMask.GetMask("Object"));

            if (downRay.collider != null && downRay.distance < 0.5f)
            {
                Debug.Log("Object");
                jumpCount = 0;
            }
        }

        Move();
        Jump();

    }

    private void OnCollisionEnter2D(Collision2D collision)
    {
        if (collision.gameObject.CompareTag("Ground"))
        {
            isjumping = false;
        }

        if (collision.gameObject.CompareTag("Object"))
        {
            isjumping = false;
        }
    }

    void Jump()
    {
        if (Input.GetButton("Jump"))
        {
            if (isjumping == false)
            {
                rigid.AddForce(Vector2.up * jumpPower, ForceMode2D.Impulse);
                isjumping = true;
            }
            else return;
        }
    }

    void Move()
    {
        horizontal = Input.GetAxis("Horizontal");

        if (horizontal != 0)
        {

            if (horizontal > 0)
            {
                rend.flipX = false;
            }
            else
            {
                rend.flipX = true;
            }

        }

        Vector2 dir = horizontal * Vector2.right;
        this.transform.Translate(dir * moveSpeed * Time.deltaTime);
    }
}
