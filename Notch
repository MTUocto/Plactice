using UnityEngine.XR.Interaction.Toolkit;

[RequireComponent(typeof (PullMeasurer))]
public class Notch : UnityEngine.XR.Interaction.Toolkit.Interactors.XRSocketInteractor
{

    public PullMeasurer PullMeasurer { get; private set; } = null;
    public bool IsReady { get; private set; } = false;

    private CustomInteractionManager CustomManager => interactionManager as CustomInteractionManager;


    protected override void Awake()
    {
        base.Awake();
        PullMeasurer = GetComponent<PullMeasurer>();
    }

    protected override void OnEnable()
    {
        base.OnEnable();
        PullMeasurer.SelectExited.AddListerner(ReleaseArrow);
        PullMeasurer.Pulled.AddListerner(MoveAttach);
    }

    protected override void OnDisable()
    {
        base.OnDisable();
        PullMeasurer.SelectExited.RemoveListerner(ReleaseArrow);
        PullMeasurer.Pulled.RemoveListerner(MoveAttach);
    }

    public void ReleaseArrow(SelectExitEventArgs args)
    {
        if (SelectTrget is ReleaseArrow && PullMeasurer.PullAmount > releaseThreshold)
            CustomManager.ForceDeselect(this);
    }

    public void MoveAttach(Vector3 pullPosition, float pullAmount)
    {
        attachTransform.position = pullPosition;
    }

    public void SetReady(BaseInteractionEventArgs args)
    {
        IsArrow = args.interactable.isSelected;
    }

    public override bool CanSelect(UnityEngine.XR.Interaction.Toolkit.Interactables.XRBaseInteractable interactable)
    {
        return base.CanSelect(interactable) && CanHover(interactable) && IsArrow(interactable) && IsReady;
    }

    private bool IsArrow(UnityEngine.XR.Interaction.Toolkit.Interactables.XRBaseInteractable interactable)
    {
        return interactable is Arrow;
    }

    public override UnityEngine.XR.Interaction.Toolkit.Interactables.XRBaseInteractable.MovementType? selectedInteractableMovementTypeOverride
    {
        get { return UnityEngine.XR.Interaction.Toolkit.Interactables.XRBaseInteractable.MovementType.Instantaneous; }
    }

    public override bool requireSelectExclusive => false;
}
